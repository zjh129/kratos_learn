// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.19.4
// source: user/user.proto

package user

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserUserDelete = "/user.User/UserDelete"
const OperationUserUserFind = "/user.User/UserFind"
const OperationUserUserList = "/user.User/UserList"
const OperationUserUserSave = "/user.User/UserSave"

type UserHTTPServer interface {
	// UserDelete Deletes user info
	UserDelete(context.Context, *UserDeleteRequest) (*UserDeleteReply, error)
	// UserFind Sends a user
	UserFind(context.Context, *UserInfoRequest) (*UserInfo, error)
	// UserList Gets user info
	UserList(context.Context, *UserListRequest) (*UserListReply, error)
	// UserSave Saves user info
	UserSave(context.Context, *UserSaveRequest) (*UserSaveReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.GET("/user/{id}", _User_UserFind0_HTTP_Handler(srv))
	r.GET("/users", _User_UserList0_HTTP_Handler(srv))
	r.POST("/user", _User_UserSave0_HTTP_Handler(srv))
	r.DELETE("/user/{id}", _User_UserDelete0_HTTP_Handler(srv))
}

func _User_UserFind0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserFind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserFind(ctx, req.(*UserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfo)
		return ctx.Result(200, reply)
	}
}

func _User_UserList0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserList(ctx, req.(*UserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListReply)
		return ctx.Result(200, reply)
	}
}

func _User_UserSave0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserSaveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserSave(ctx, req.(*UserSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserSaveReply)
		return ctx.Result(200, reply)
	}
}

func _User_UserDelete0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserDelete(ctx, req.(*UserDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserDeleteReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	UserDelete(ctx context.Context, req *UserDeleteRequest, opts ...http.CallOption) (rsp *UserDeleteReply, err error)
	UserFind(ctx context.Context, req *UserInfoRequest, opts ...http.CallOption) (rsp *UserInfo, err error)
	UserList(ctx context.Context, req *UserListRequest, opts ...http.CallOption) (rsp *UserListReply, err error)
	UserSave(ctx context.Context, req *UserSaveRequest, opts ...http.CallOption) (rsp *UserSaveReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...http.CallOption) (*UserDeleteReply, error) {
	var out UserDeleteReply
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserUserDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) UserFind(ctx context.Context, in *UserInfoRequest, opts ...http.CallOption) (*UserInfo, error) {
	var out UserInfo
	pattern := "/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserUserFind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) UserList(ctx context.Context, in *UserListRequest, opts ...http.CallOption) (*UserListReply, error) {
	var out UserListReply
	pattern := "/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) UserSave(ctx context.Context, in *UserSaveRequest, opts ...http.CallOption) (*UserSaveReply, error) {
	var out UserSaveReply
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
